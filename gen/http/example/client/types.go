// Code generated by goa v3.16.2, DO NOT EDIT.
//
// example HTTP client types
//
// Command:
// $ goa gen example/design

package client

import (
	example "example/gen/example"

	goa "goa.design/goa/v3/pkg"
)

// CreateSomeDataRequestBody is the type of the "example" service
// "CreateSomeData" endpoint HTTP request body.
type CreateSomeDataRequestBody struct {
	ID      string `form:"id" json:"id" xml:"id"`
	Content string `form:"content" json:"content" xml:"content"`
}

// CreateSomeDataResponseBody is the type of the "example" service
// "CreateSomeData" endpoint HTTP response body.
type CreateSomeDataResponseBody struct {
	ID        *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	Content   *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
}

// CreateSomeDataBadRequestResponseBody is the type of the "example" service
// "CreateSomeData" endpoint HTTP response body for the "BadRequest" error.
type CreateSomeDataBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// NewCreateSomeDataRequestBody builds the HTTP request body from the payload
// of the "CreateSomeData" endpoint of the "example" service.
func NewCreateSomeDataRequestBody(p *example.CreateSomeDataPayload) *CreateSomeDataRequestBody {
	body := &CreateSomeDataRequestBody{
		ID:      p.ID,
		Content: p.Content,
	}
	return body
}

// NewCreateSomeDataSomeDataOK builds a "example" service "CreateSomeData"
// endpoint result from a HTTP "OK" response.
func NewCreateSomeDataSomeDataOK(body *CreateSomeDataResponseBody) *example.SomeData {
	v := &example.SomeData{
		ID:        *body.ID,
		Content:   *body.Content,
		CreatedAt: *body.CreatedAt,
	}

	return v
}

// NewCreateSomeDataBadRequest builds a example service CreateSomeData endpoint
// BadRequest error.
func NewCreateSomeDataBadRequest(body *CreateSomeDataBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateCreateSomeDataResponseBody runs the validations defined on
// CreateSomeDataResponseBody
func ValidateCreateSomeDataResponseBody(body *CreateSomeDataResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.CreatedAt != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.created_at", *body.CreatedAt, goa.FormatDateTime))
	}
	return
}

// ValidateCreateSomeDataBadRequestResponseBody runs the validations defined on
// CreateSomeData_BadRequest_Response_Body
func ValidateCreateSomeDataBadRequestResponseBody(body *CreateSomeDataBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}
